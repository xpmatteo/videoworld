group = 'com.thoughtworks.videorental'
version = '1.0-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.akhikhl.gretty:gretty:1.4.0'
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'org.akhikhl.gretty'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    unit_tests = [
        'junit:junit:4.12',
        'org.hamcrest:hamcrest-all:1.3',
        'org.mockito:mockito-core:1.10.19'
    ]

    integration_tests = [
        'org.jsoup:jsoup:1.10.2'
    ]

    acceptance_tests = [
        'info.cukes:cucumber-java:1.2.5',
        'info.cukes:cucumber-junit:1.2.5',
        'org.seleniumhq.selenium:selenium-java:2.53.0',

    ]

    app = [
        'org.hibernate:hibernate-core:3.6.7.Final',
        'org.freemarker:freemarker:2.3.26-incubating',
        'joda-time:joda-time:1.6',
        'org.eclipse.jetty:jetty-server:9.4.3.v20170317',
        'org.eclipse.jetty:jetty-webapp:9.4.3.v20170317'
    ]

    logs = [
        'org.slf4j:slf4j-simple:1.7.25',
        'org.slf4j:slf4j-api:1.7.25'
    ]

    local_files = [
        'lib/tw-commons-ddd-1.0.jar'
    ]

    server = [
        'javax.servlet:servlet-api:2.5'
    ]
}

dependencies {
    compile app
    compile logs

    compile files(local_files)

    providedCompile server

    testCompile unit_tests
    testCompile integration_tests
    testCompile acceptance_tests
    testCompile group: 'com.codeborne', name: 'phantomjsdriver', version: '1.2.1'

}

gretty {
    port=8081
    contextPath = '/'
    integrationTestTask = 'cucumber'
}

sourceSets {
    cucumber {
        java {
            srcDir 'src/cucumber/src/test/java'
        }

        compileClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += sourceSets.test.compileClasspath
    }
}

task cucumber(type: Test) {
    description = 'Runs End to End Tests'
    testClassesDir = sourceSets.cucumber.output.classesDir
    classpath += sourceSets.cucumber.runtimeClasspath
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

test {
    testLogging {
        events 'skipped', 'failed'
        exceptionFormat = 'full'
        afterSuite { desc, result ->
            if (!desc.parent) { // will only run for the outermost suite
                println "${result.testCount} test run, ${result.successfulTestCount} succeeded, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped"
            }
        }
    }
}

